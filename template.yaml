AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Template to create a DynamoDB table and an API for a todo list
Parameters:
  Table: {Default: todo, Type: String}
Resources:
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref Table
      AttributeDefinitions:
        - AttributeName: todoId
          AttributeType: N
      KeySchema:
        - AttributeName: todoId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  TodoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "/todos":
            get:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: AWS
                uri: {"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"}
                credentials: { "Fn::Sub": "arn:aws:iam::537217846202:role/db-access"}
                requestTemplates:
                  application/json: {
                    'Fn::Sub': "{ \"TableName\": \"${Table}\"}"
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                        application/json: "#set ($todosRoot=$input.path('$')) { \"todos\": [ #foreach($todo in $todosRoot.Items) { \"todoId\": \"$todo.todoId.N\", \"title\": \"$todo.title.S\", \"status\": \"$todo.status.S\" } #if($foreach.hasNext),#end #end ] }"
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: AWS
                uri: {"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"}
                credentials: { "Fn::Sub": "arn:aws:iam::537217846202:role/db-access"}
                requestTemplates:
                  application/json: {
                    'Fn::Sub': "{ \"TableName\": \"${Table}\", \"Key\": { \"todoId\": { \"N\": \"$input.path('$.todoId')\" } }, \"UpdateExpression\": \"set title = :val1, #s = :val2\", \"ExpressionAttributeNames\": { \"#s\": \"status\" }, \"ExpressionAttributeValues\": { \":val1\": { \"S\": \"$input.path('$.title')\" }, \":val2\": { \"S\": \"$input.path('$.status')\" } }, \"ReturnValues\": \"ALL_NEW\" }"
                    }
                responses:
                  "200":
                    statusCode: "200"
                    responseTemplates:
                      application/json: "#set ($todoRoot=$input.path('$.Attributes')) { \"todoId\": \"$todoRoot.todoId.N\", \"title\": \"$todoRoot.title.S\", \"status\": \"$todoRoot.status.S\" }"
                  "500":
                    statusCode: "500"
                  "400":
                    statusCode: "400"
          "/todos/{todoId}":
            put:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/schema"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: AWS
                uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"}
                credentials: { "Fn::Sub": "arn:aws:iam::537217846202:role/db-access"}
                requestTemplates:
                  application/json:  { 
                    'Fn::Sub': "{ \n\
                    \t\"TableName\": \"${Table}\",\n\
                    \t\"Key\": {\n\ 
                    \t\t\"todoId\": {\n\
                    \t\t\t\"N\": \"$input.path('$.todoId')\"\n\
                    \t\t}\n\
                    \t},\n\
                    \t\"UpdateExpression\": \"set title = :val1, #s = :val2\",\n\
                    \t\"ExpressionAttributeNames\": {\n\
                    \t\t\"#s\": \"status\"\n\
                    \t},\n\
                    \t\"ExpressionAttributeValues\": {\n\
                    \t\t\":val1\": {\n\
                    \t\t\t\"S\": \"$input.path('$.title')\"\n\
                    \t\t},\n\
                    \t\t\":val2\": {\n\
                    \t\t\t\"S\": \"$input.path('$.status')\"\n\
                    \t\t}\n\
                    \t},\n\
                    \t\"ReturnValues\": \"ALL_NEW\"\n\
                    }"
                  }
                responses:
                  "200":
                    statusCode: "200"
                    responseTemplates:
                      application/json: "#set ($todoRoot=$input.path('$.Attributes')) { \"todoId\": \"$todoRoot.todoId.N\", \"title\": \"$todoRoot.title.S\", \"status\": \"$todoRoot.status.S\" }"
                  "500":
                    statusCode: "500"
                  default:
                    statusCode: "400"
            delete:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              parameters:
                - name: "todoId"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Emtpy"
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: AWS
                uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem" }
                credentials: { "Fn::Sub": "arn:aws:iam::537217846202:role/db-access"}
                requestTemplates:
                  application/json:  { 
                    'Fn::Sub': "{ \n\
                      \t\"TableName\": \"${Table}\",\n\
                      \t\"Key\": {\n\
                      \t\t\"todoId\": {\n
                      \t\t\t\"N\": \"$input.params('todoId')\"\n\
                      \t\t}\n\
                      \t}\n}" 
                    }
                responses:
                  default:
                    statusCode: "200"